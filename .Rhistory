,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('ACETONE BULK (HERC)','ACETONE, HIGH PURITY,BU','ACETONE,TECHNICAL GRADE,BU')
and PlantDesc = 'TN CHEMICAL MANUFACTURING'
",control = control_l)
Acetone<-Acetone %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Acetone = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Acetone, by = "Date")
#################################################################################################################
#Ethane
Ethane<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('ETHANE,PIPELINE,BU')
and PlantDesc = 'Oil Price Information Service'
",control = control_l)
Ethane<-Ethane %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Ethane = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Ethane, by = "Date")
#################################################################################################################
#Ethylene
Ethylene<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('ETHYLENE GLYCOL(EG),FIBER GRADE,BU','ETHYLENE,PURCHASE-COSTING ONLY')
and PlantDesc = 'TN POLYMERS MANUFACTURING'
",control = control_l)
Ethylene<-Ethylene %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Ethylene = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Ethylene, by = "Date")
#################################################################################################################
#Methanol
Methanol<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('METHANOL,BU','METHANOL,PURCHASE-COSTING ONLY')
and PlantDesc = 'TN CHEMICAL MANUFACTURING'
",control = control_l)
Methanol<-Methanol %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Methanol = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Methanol, by = "Date")
####################################################################################################
#NaturalGas
NatGas<-msQuery(
"
select
MaterialDesc
,EntryDate
,PlantID
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('NATURAL GAS, PIPELINE, BU','NATURAL GAS, SG, PIPELINE, BU','NATURAL GASOLINE,BU')
and PlantID in ('HHUB','HSC')
",control = control_l)
NatGas<-NatGas %>%
spread(PlantID,MonthlyValue) %>%
mutate(HHUB = ifelse((HHUB>mean(HHUB,na.rm=T)+4*sd(HHUB,na.rm=T)),NA,HHUB)) %>%
mutate(HHUB = ifelse((HHUB<mean(HHUB,na.rm=T)-4*sd(HHUB,na.rm=T)),NA,HHUB)) %>%
mutate(HSC = ifelse((HSC>mean(HSC,na.rm=T)+4*sd(HSC,na.rm=T)),NA,HSC)) %>%
mutate(HSC = ifelse((HSC<mean(HSC,na.rm=T)-4*sd(HSC,na.rm=T)),NA,HSC)) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate) %>%
rename(NGHH = HHUB, NGHSC = HSC)
inpoots<-left_join(inpoots,NatGas, by = "Date")
####################################################################################################
#Propane
Propane<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('PROPANE CONT. IN TEX E/P MIX,PIPELINE,BU','PROPANE,PIPELINE,BU')
and PlantDesc = 'Oil Price Information Service'
",control = control_l)
Propane<-Propane %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Propane = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Propane, by = "Date")
####################################################################################################
#Propylene
Propylene<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('PROPYLENE GLYCOL, INDUSTRIAL (PG), BU','PROPYLENE,POLYMER GRADE, BU','PROPYLENE,POLYMER GRADE,PIPELINE BU','PROPYLENE,PURCHASE-COSTING ONLY')
and PlantDesc = 'IHS'
",control = control_l)
Propylene<-Propylene %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Propylene = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,Propylene, by = "Date")
####################################################################################################
#PX
PX<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('P-XYLENE,BU')
and PlantDesc = 'US Contract Price'
",control = control_l)
PX<-PX %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(PX = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate)
inpoots<-left_join(inpoots,PX, by = "Date")
####################################################################################################
#Diesel
Diesel<-msQuery(
"
select
MaterialDesc
,EntryDate
,MonthlyValue
from [RMFP1].[dbo].[KeyFigureListing]
where 1=1
and keyfigure in ('FCTP')
and MaterialDesc in ('FUEL OIL,#2 DIESEL,LOW SULFUR 0.05WT%,BU')
",control = control_l)
Diesel<-Diesel %>%
mutate(MonthlyValue = ifelse((MonthlyValue>mean(MonthlyValue,na.rm=T)+4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
mutate(MonthlyValue = ifelse((MonthlyValue<mean(MonthlyValue,na.rm=T)-4*sd(MonthlyValue,na.rm=T)),NA,MonthlyValue)) %>%
rename(Diesel = MonthlyValue) %>%
mutate(Date = as.Date(EntryDate)) %>%
select(- MaterialDesc, -EntryDate) %>%
rename(GASDESM = Diesel)
time<-str_replace(Sys.Date(),"\\-[0-9]*$","-01")
inpoots<-left_join(inpoots,Diesel, by = "Date")
is.na(inpoots)
inpoots<-inpoots[which(apply(inpoots,1,function(x){length(which(is.na(x)))})<5),]
missing<-mice(inpoots %>% select(-Date), printFlag = F, m = 25)
inpoots1<-mice::complete(missing)
inpoots1$Date<-inpoots$Date
inpoots<-inpoots1
inpoots_fill<-inpoots %>%
arrange(desc(Date))
inpoots_out<-inpoots %>%
arrange(desc(Date)) %>%
select(-Date)
lag1<-inpoots_out %>% mutate_each(funs(lag))
lag1[1,]<-inpoots_fill[1,] %>% select(-Date)
names(lag1)<-str_c(names(lag1),"_lag1")
lag3<-inpoots_out %>% mutate_each(funs(lag(.,n=3)))
lag3[1:3,]<-inpoots_fill[1:3,]%>% select(-Date)
names(lag3)<-str_c(names(lag3),"_lag3")
lag6<-inpoots_out %>% mutate_each(funs(lag(.,n=6)))
lag6[1:6,]<-inpoots_fill[1:6,]%>% select(-Date)
names(lag6)<-str_c(names(lag6),"_lag6")
lag<-bind_cols(lag1,lag3,lag6)
lag[is.na(lag)]<-0
inpoots<-bind_cols(inpoots_out,lag)%>%
mutate(date = inpoots_fill$Date) %>%
mutate(month = format(date,"%m")) %>%
mutate(quarter = quarters(date))
inpoots<-dummy.data.frame(as.data.frame(inpoots),names = c("month","quarter"))
rm(list=ls()[-which(ls()%in%c("base","inpoots","stuff"))])
View(base)
25*2
25*2.5
library(rstan)
library(ggplot2)
## Read the data
# Data are at http://www.stat.columbia.edu/~gelman/arm/examples/radon
# The R codes & data files should be saved in the same directory for
# the source command to work
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")
mn <- srrs2$state=="MN"
radon <- srrs2$activity[mn]
log.radon <- log (ifelse (radon==0, .1, radon))
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor
n <- length(radon)
y <- log.radon
x <- floor
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")
setwd("C:\\Users\\U774712\\Documents\\Personal\\BayesianBookClub")
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")
mn <- srrs2$state=="MN"
radon <- srrs2$activity[mn]
log.radon <- log (ifelse (radon==0, .1, radon))
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor
n <- length(radon)
y <- log.radon
x <- floor
View(srrs2)
county.name <- as.vector(srrs2$county[mn])
uniq <- unique(county.name)
J <- length(uniq)
county <- rep (NA, J)
for (i in 1:J){
county[county.name==uniq[i]] <- i
}
# no predictors
ybarbar = mean(y)
sample.size <- as.vector (table (county))
sample.size.jittered <- sample.size*exp (runif (J, -.1, .1))
cty.mns = tapply(y,county,mean)
cty.vars = tapply(y,county,var)
cty.sds = mean(sqrt(cty.vars[!is.na(cty.vars)]))/sqrt(sample.size)
cty.sds.sep = sqrt(tapply(y,county,var)/sample.size)
## Get the county-level predictor
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips
cty <- read.table ("cty.dat", header=T, sep=",")
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- cty[usa.rows,"Uppm"]
u <- log (uranium)
## Varying-intercept model w/ group-level predictors
u.full <- u[county]
dataList.3 <- list(N=length(y), y=y,x=x,county=county,u=u.full)
radon_group.sf1 <- stan(file='radon_group.stan', data=dataList.3,
iter=1000, chains=4)
print(radon_group.sf1, pars = c("b","beta", "sigma", "lp__"))
cty <- read.table ("cty.dat", header=T, sep=",")
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- cty[usa.rows,"Uppm"]
u <- log (uranium)
## Varying-intercept model w/ group-level predictors
u.full <- u[county]
dataList.3 <- list(N=length(y), y=y,x=x,county=county,u=u.full)
radon_group.sf1 <- stan(file='radon_group.stan', data=dataList.3,
iter=1000, chains=4)
print(radon_group.sf1, pars = c("b","beta", "sigma", "lp__"))
setwd("C:\\Users\\U774712\\Documents\\Personal\\BayesianBookClub")
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")
mn <- srrs2$state=="MN"
radon <- srrs2$activity[mn]
log.radon <- log (ifelse (radon==0, .1, radon))
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor
n <- length(radon)
y <- log.radon
x <- floor
county.name <- as.vector(srrs2$county[mn])
uniq <- unique(county.name)
J <- length(uniq)
county <- rep (NA, J)
for (i in 1:J){
county[county.name==uniq[i]] <- i
}
# no predictors
ybarbar = mean(y)
sample.size <- as.vector (table (county))
sample.size.jittered <- sample.size*exp (runif (J, -.1, .1))
cty.mns = tapply(y,county,mean)
cty.vars = tapply(y,county,var)
cty.sds = mean(sqrt(cty.vars[!is.na(cty.vars)]))/sqrt(sample.size)
cty.sds.sep = sqrt(tapply(y,county,var)/sample.size)
## Get the county-level predictor
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips
cty <- read.table ("cty.dat", header=T, sep=",")
cty <- read.table ("cty.dat", header=T, sep=",")
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- cty[usa.rows,"Uppm"]
u <- log (uranium)
## Varying-intercept model w/ group-level predictors
u.full <- u[county]
dataList.3 <- list(N=length(y), y=y,x=x,county=county,u=u.full)
radon_group.sf1 <- stan(file='radon_group.stan', data=dataList.3,
iter=1000, chains=4)
print(radon_group.sf1, pars = c("b","beta", "sigma", "lp__"))
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips
cty <- read.table ("cty.dat", header=T, sep=",")
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- cty[usa.rows,"Uppm"]
u <- log (uranium)
## Varying-intercept model w/ group-level predictors
u.full <- u[county]
dataList.3 <- list(N=length(y), y=y,x=x,county=county,u=u.full)
dataList.3
y
radon_group.sf1 <- stan(file='radon_group.stan', data=dataList.3,
iter=1000, chains=4)
print(radon_group.sf1, pars = c("b","beta", "sigma", "lp__"))
table(floor)
library(rstan)
library(ggplot2)
srrs2 <- read.table ("C:\\Users\\U774712\\Documents\\Personal\\BayesianBookClub\\example-models\\ARM\\Ch.12\\srrs2.dat", header=T, sep=",")
mn <- srrs2$state=="MN"
radon <- srrs2$activity[mn]
log.radon <- log (ifelse (radon==0, .1, radon))
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor
n <- length(radon)
y <- log.radon
x <- floor
# get county index variable
county.name <- as.vector(srrs2$county[mn])
uniq <- unique(county.name)
J <- length(uniq)
county <- rep (NA, J)
for (i in 1:J){
county[county.name==uniq[i]] <- i
}
# no predictors
ybarbar = mean(y)
sample.size <- as.vector (table (county))
sample.size.jittered <- sample.size*exp (runif (J, -.1, .1))
cty.mns = tapply(y,county,mean)
cty.vars = tapply(y,county,var)
cty.sds = mean(sqrt(cty.vars[!is.na(cty.vars)]))/sqrt(sample.size)
cty.sds.sep = sqrt(tapply(y,county,var)/sample.size)
## Complete pooling regression
dataList.1 <- list(N=length(y), y=y,x=x)
radon_complete_pool.sf1 <- stan(file='C:\\Users\\U774712\\Documents\\Personal\\BayesianBookClub\\example-models\\ARM\\Ch.12\\radon_complete_pool.stan',
data=dataList.1,
iter=1000, chains=4)
print(radon_complete_pool.sf1)
post.pooled <- extract(radon_complete_pool.sf1)
pooled <- colMeans(post.pooled$beta)
names(srrs2)
lm(y~x)
dataList.2 <- list(N=length(y), y=y,x=x,county=county)
radon_no_pool.sf1 <- stan(file='C:\\Users\\U774712\\Documents\\Personal\\BayesianBookClub\\example-models\\ARM\\Ch.12\\radon_no_pool.stan', data=dataList.2,
iter=1000, chains=4)
print(radon_no_pool.sf1)
post.unpooled <- extract(radon_no_pool.sf1)
unpooled <- colMeans(post.unpooled$a)
post.unpooled
unpooled
pooled
print(radon_complete_pool.sf1)
print(radon_no_pool.sf1)
sd.unpooled <- rep(NA,85)
for (n in 1:85) {
sd.unpooled[n] <- sd(post.unpooled$a[,n])
}
sd.unpooled
post.unpooled
post.unpooled$a
x.jitter <- x + runif(n,-.05,.05)
display8 <- c (36, 1, 35, 21, 14, 71, 61, 70)  # counties to be displayed
y.range <- range (y[!is.na(match(county,display8))])
radon.data <- data.frame(y, x.jitter, county)
radon8.data <- subset(radon.data, county %in% display8)
radon8.data$county.name <- radon8.data$county
radon8.data$county.name <- factor(radon8.data$county.name,levels=c("36","1","35","21","14","71","61","70"),
labels=c("LAC QUI PARLE", "AITKIN", "KOOCHICHING",
"DOUGLAS", "CLAY", "STEARNS", "RAMSEY",
"ST LOUIS"))
radon8.data$pooled.int <- pooled[1]
radon8.data$pooled.slope <- pooled[2]
radon8.data$unpooled.int <- unpooled[radon8.data$county]
radon8.data$unpooled.slope <- mean(post.unpooled$beta)
p1 <- ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
facet_wrap(~ county.name, ncol = 4)
print(p1)
M1 <- extract(radon_no_pool.sf1)
M1.factor <- colMeans(M1$factor)
dataList.2 <- list(N=length(y), y=y,x=x,county=county)
radon_no_pool.sf1 <- stan(file='radon_no_pool.stan', data=dataList.2,
iter=1000, chains=4)
print(radon_no_pool.sf1)
M1 <- extract(radon_no_pool.sf1)
M1.factor <- colMeans(M1$factor)
M1.beta <- mean(M1$beta)
M1 <- lmer (y ~ x + (1 | county))
a.hat.M1 <- coef(M1)$county[,1]                # 1st column is the intercept
b.hat.M1 <- coef(M1)$county[,2]
x.jitter <- x + runif(n,-.05,.05)
display8 <- c (36, 1, 35, 21, 14, 71, 61, 70)  # counties to be displayed
y.range <- range (y[!is.na(match(county,display8))])
radon.data <- data.frame(y, x.jitter, county)
radon8.data <- subset(radon.data, county %in% display8)
radon8.data$county.name <- radon8.data$county
radon8.data$county.name <- factor(radon8.data$county.name,levels=c("36","1","35","21","14","71","61","70"),
labels=c("LAC QUI PARLE", "AITKIN", "KOOCHICHING",
"DOUGLAS", "CLAY", "STEARNS", "RAMSEY",
"ST LOUIS"))
radon8.data$pooled.int <- pooled[1]
radon8.data$pooled.slope <- pooled[2]
radon8.data$unpooled.int <- unpooled[radon8.data$county]
radon8.data$unpooled.slope <- mean(post.unpooled$beta)
radon8.data$coef.int <- a.hat.M1[radon8.data$county]
radon8.data$coef.slope <- b.hat.M1[radon8.data$county]
p1 <- ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
geom_abline(aes(intercept = coef.int, slope = coef.slope), size = 0.25) +
facet_wrap(~ county.name, ncol = 4)
print(p1)
radon8.data$coef.int <- a.hat.M1[radon8.data$county]
radon8.data$coef.slope <- b.hat.M1[radon8.data$county]
ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
geom_abline(aes(intercept = coef.int, slope = coef.slope), size = 0.25) +
facet_wrap(~ county.name, ncol = 4)
radon8.data$coef_int <- a.hat.M1[radon8.data$county]
p1 <- ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
geom_abline(aes(intercept = coef_int, slope = coef.slope), size = 0.25) +
facet_wrap(~ county.name, ncol = 4)
print(p1)
View(radon8.data)
a.hat.M1[radon8.data$county]
radon8.data$county
a.hat.M1
a.hat.M1 <- coef(M1)$county[,1]                # 1st column is the intercept
coef(M1)$county[,1]
M1 <- lmer (y ~ x + (1 | county))
install.packages(lme4)
install.packages("lme4")
library(lme4)
M1 <- lmer (y ~ x + (1 | county))
a.hat.M1 <- coef(M1)$county[,1]                # 1st column is the intercept
b.hat.M1 <- coef(M1)$county[,2]                # 2nd element is the slope
x.jitter <- x + runif(n,-.05,.05)
display8 <- c (36, 1, 35, 21, 14, 71, 61, 70)  # counties to be displayed
y.range <- range (y[!is.na(match(county,display8))])
radon.data <- data.frame(y, x.jitter, county)
radon8.data <- subset(radon.data, county %in% display8)
radon8.data$county.name <- radon8.data$county
radon8.data$county.name <- factor(radon8.data$county.name,levels=c("36","1","35","21","14","71","61","70"),
labels=c("LAC QUI PARLE", "AITKIN", "KOOCHICHING",
"DOUGLAS", "CLAY", "STEARNS", "RAMSEY",
"ST LOUIS"))
radon8.data$pooled.int <- pooled[1]
radon8.data$pooled.slope <- pooled[2]
radon8.data$unpooled.int <- unpooled[radon8.data$county]
radon8.data$unpooled.slope <- mean(post.unpooled$beta)
radon8.data$coef_int <- a.hat.M1[radon8.data$county]
radon8.data$coef.slope <- b.hat.M1[radon8.data$county]
p1 <- ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
geom_abline(aes(intercept = coef_int, slope = coef.slope), size = 0.25) +
facet_wrap(~ county.name, ncol = 4)
print(p1)
View(radon8.data)
?geom_abline
p1 <- ggplot(radon8.data, aes(x.jitter, y)) +
geom_jitter(position = position_jitter(width = .05, height = 0)) +
scale_x_continuous(breaks=c(0,1), labels=c("0", "1")) +
geom_abline(aes(intercept = pooled.int, slope = pooled.slope), linetype = "dashed") +
geom_abline(aes(intercept = unpooled.int, slope = unpooled.slope), size = 0.25) +
geom_abline(aes(intercept = coef_int, slope = coef.slope), size = 0.25, color = "red") +
facet_wrap(~ county.name, ncol = 4)
print(p1)
